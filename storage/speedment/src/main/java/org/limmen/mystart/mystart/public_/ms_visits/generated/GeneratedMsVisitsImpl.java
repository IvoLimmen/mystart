package org.limmen.mystart.mystart.public_.ms_visits.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import org.limmen.mystart.mystart.public_.ms_link.MsLink;
import org.limmen.mystart.mystart.public_.ms_visits.MsVisits;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalLong;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * org.limmen.mystart.mystart.public_.ms_visits.MsVisits}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMsVisitsImpl implements MsVisits {
    
    private long id;
    private Long linkId;
    private Timestamp visit;
    
    protected GeneratedMsVisitsImpl() {}
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public OptionalLong getLinkId() {
        return OptionalUtil.ofNullable(linkId);
    }
    
    @Override
    public Optional<Timestamp> getVisit() {
        return Optional.ofNullable(visit);
    }
    
    @Override
    public MsVisits setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public MsVisits setLinkId(Long linkId) {
        this.linkId = linkId;
        return this;
    }
    
    @Override
    public MsVisits setVisit(Timestamp visit) {
        this.visit = visit;
        return this;
    }
    
    @Override
    public Optional<MsLink> findLinkId(Manager<MsLink> foreignManager) {
        if (getLinkId().isPresent()) {
            return foreignManager.stream().filter(MsLink.ID.equal(getLinkId().getAsLong())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "     + Objects.toString(getId()));
        sj.add("linkId = " + Objects.toString(OptionalUtil.unwrap(getLinkId())));
        sj.add("visit = "  + Objects.toString(OptionalUtil.unwrap(getVisit())));
        return "MsVisitsImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof MsVisits)) { return false; }
        final MsVisits thatMsVisits = (MsVisits)that;
        if (this.getId() != thatMsVisits.getId()) { return false; }
        if (!Objects.equals(this.getLinkId(), thatMsVisits.getLinkId())) { return false; }
        if (!Objects.equals(this.getVisit(), thatMsVisits.getVisit())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLinkId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getVisit()));
        return hash;
    }
}