package org.limmen.mystart.mystart.public_.ms_visits.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;
import org.limmen.mystart.mystart.public_.ms_visits.MsVisits;
import org.limmen.mystart.mystart.public_.ms_visits.MsVisitsImpl;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * org.limmen.mystart.mystart.public_.ms_visits.MsVisits} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMsVisitsSqlAdapter implements SqlAdapter<MsVisits> {
    
    private final TableIdentifier<MsVisits> tableIdentifier;
    
    protected GeneratedMsVisitsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("mystart", "public", "ms_visits");
    }
    
    protected MsVisits apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(     resultSet.getLong(1 + offset))
            .setLinkId( getLong(resultSet, 2 + offset))
            .setVisit(  resultSet.getTimestamp(3 + offset))
            ;
    }
    
    protected MsVisitsImpl createEntity() {
        return new MsVisitsImpl();
    }
    
    @Override
    public TableIdentifier<MsVisits> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, MsVisits> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, MsVisits> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}