package org.limmen.mystart.mystart.public_.ms_link.generated;

import com.speedment.common.function.OptionalBoolean;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;
import javax.annotation.Generated;
import org.limmen.mystart.mystart.public_.ms_link.MsLink;
import org.limmen.mystart.mystart.public_.ms_user.MsUser;

/**
 * The generated base implementation of the {@link
 * org.limmen.mystart.mystart.public_.ms_link.MsLink}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedMsLinkImpl implements MsLink {
    
    private int id;
    private Integer userId;
    private String description;
    private String source;
    private String title;
    private String url;
    private String host;
    private String labels;
    private Boolean privateNetwork;
    private Timestamp lastVisit;
    private Timestamp creationDate;
    
    protected GeneratedMsLinkImpl() {
        
    }
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public OptionalInt getUserId() {
        return OptionalUtil.ofNullable(userId);
    }
    
    @Override
    public Optional<String> getDescription() {
        return Optional.ofNullable(description);
    }
    
    @Override
    public Optional<String> getSource() {
        return Optional.ofNullable(source);
    }
    
    @Override
    public Optional<String> getTitle() {
        return Optional.ofNullable(title);
    }
    
    @Override
    public Optional<String> getUrl() {
        return Optional.ofNullable(url);
    }
    
    @Override
    public Optional<String> getHost() {
        return Optional.ofNullable(host);
    }
    
    @Override
    public Optional<String> getLabels() {
        return Optional.ofNullable(labels);
    }
    
    @Override
    public OptionalBoolean getPrivateNetwork() {
        return OptionalUtil.ofNullable(privateNetwork);
    }
    
    @Override
    public Optional<Timestamp> getLastVisit() {
        return Optional.ofNullable(lastVisit);
    }
    
    @Override
    public Optional<Timestamp> getCreationDate() {
        return Optional.ofNullable(creationDate);
    }
    
    @Override
    public MsLink setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public MsLink setUserId(Integer userId) {
        this.userId = userId;
        return this;
    }
    
    @Override
    public MsLink setDescription(String description) {
        this.description = description;
        return this;
    }
    
    @Override
    public MsLink setSource(String source) {
        this.source = source;
        return this;
    }
    
    @Override
    public MsLink setTitle(String title) {
        this.title = title;
        return this;
    }
    
    @Override
    public MsLink setUrl(String url) {
        this.url = url;
        return this;
    }
    
    @Override
    public MsLink setHost(String host) {
        this.host = host;
        return this;
    }
    
    @Override
    public MsLink setLabels(String labels) {
        this.labels = labels;
        return this;
    }
    
    @Override
    public MsLink setPrivateNetwork(Boolean privateNetwork) {
        this.privateNetwork = privateNetwork;
        return this;
    }
    
    @Override
    public MsLink setLastVisit(Timestamp lastVisit) {
        this.lastVisit = lastVisit;
        return this;
    }
    
    @Override
    public MsLink setCreationDate(Timestamp creationDate) {
        this.creationDate = creationDate;
        return this;
    }
    
    @Override
    public Optional<MsUser> findUserId(Manager<MsUser> foreignManager) {
        if (getUserId().isPresent()) {
            return foreignManager.stream().filter(MsUser.ID.equal(getUserId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "             + Objects.toString(getId()));
        sj.add("userId = "         + Objects.toString(OptionalUtil.unwrap(getUserId())));
        sj.add("description = "    + Objects.toString(OptionalUtil.unwrap(getDescription())));
        sj.add("source = "         + Objects.toString(OptionalUtil.unwrap(getSource())));
        sj.add("title = "          + Objects.toString(OptionalUtil.unwrap(getTitle())));
        sj.add("url = "            + Objects.toString(OptionalUtil.unwrap(getUrl())));
        sj.add("host = "           + Objects.toString(OptionalUtil.unwrap(getHost())));
        sj.add("labels = "         + Objects.toString(OptionalUtil.unwrap(getLabels())));
        sj.add("privateNetwork = " + Objects.toString(OptionalUtil.unwrap(getPrivateNetwork())));
        sj.add("lastVisit = "      + Objects.toString(OptionalUtil.unwrap(getLastVisit())));
        sj.add("creationDate = "   + Objects.toString(OptionalUtil.unwrap(getCreationDate())));
        return "MsLinkImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof MsLink)) { return false; }
        final MsLink thatMsLink = (MsLink)that;
        if (this.getId() != thatMsLink.getId()) {return false; }
        if (!Objects.equals(this.getUserId(), thatMsLink.getUserId())) {return false; }
        if (!Objects.equals(this.getDescription(), thatMsLink.getDescription())) {return false; }
        if (!Objects.equals(this.getSource(), thatMsLink.getSource())) {return false; }
        if (!Objects.equals(this.getTitle(), thatMsLink.getTitle())) {return false; }
        if (!Objects.equals(this.getUrl(), thatMsLink.getUrl())) {return false; }
        if (!Objects.equals(this.getHost(), thatMsLink.getHost())) {return false; }
        if (!Objects.equals(this.getLabels(), thatMsLink.getLabels())) {return false; }
        if (!Objects.equals(this.getPrivateNetwork(), thatMsLink.getPrivateNetwork())) {return false; }
        if (!Objects.equals(this.getLastVisit(), thatMsLink.getLastVisit())) {return false; }
        if (!Objects.equals(this.getCreationDate(), thatMsLink.getCreationDate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getUserId());
        hash = 31 * hash + Objects.hashCode(getDescription());
        hash = 31 * hash + Objects.hashCode(getSource());
        hash = 31 * hash + Objects.hashCode(getTitle());
        hash = 31 * hash + Objects.hashCode(getUrl());
        hash = 31 * hash + Objects.hashCode(getHost());
        hash = 31 * hash + Objects.hashCode(getLabels());
        hash = 31 * hash + Objects.hashCode(getPrivateNetwork());
        hash = 31 * hash + Objects.hashCode(getLastVisit());
        hash = 31 * hash + Objects.hashCode(getCreationDate());
        return hash;
    }
}