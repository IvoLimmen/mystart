package org.limmen.mystart.mystart.public_.ms_link.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;
import org.limmen.mystart.mystart.public_.ms_link.MsLink;
import org.limmen.mystart.mystart.public_.ms_link.MsLinkImpl;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * org.limmen.mystart.mystart.public_.ms_link.MsLink} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMsLinkSqlAdapter implements SqlAdapter<MsLink> {
    
    private final TableIdentifier<MsLink> tableIdentifier;
    
    protected GeneratedMsLinkSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("mystart", "public", "ms_link");
    }
    
    protected MsLink apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(             resultSet.getLong(1 + offset))
            .setUserId(         getLong(resultSet, 2 + offset))
            .setDescription(    resultSet.getString(3 + offset))
            .setSource(         resultSet.getString(4 + offset))
            .setTitle(          resultSet.getString(5 + offset))
            .setUrl(            resultSet.getString(6 + offset))
            .setLabels(         resultSet.getString(7 + offset))
            .setPrivateNetwork( getBoolean(resultSet, 8 + offset))
            .setLastVisit(      resultSet.getTimestamp(9 + offset))
            .setCreationDate(   resultSet.getTimestamp(10 + offset))
            ;
    }
    
    protected MsLinkImpl createEntity() {
        return new MsLinkImpl();
    }
    
    @Override
    public TableIdentifier<MsLink> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, MsLink> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, MsLink> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}